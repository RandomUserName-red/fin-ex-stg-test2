# .github/workflows/security-scan.yml
name: Security Scan

on:
  pull_request_target:
    branches: [ "main" ]

permissions:
  contents: read
  # Minimal or read-only permissions. Enough to checkout code.

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      # ---------------------------
      # 1) Check out the PR code
      # ---------------------------
      - name: Checkout PR Code
        uses: actions/checkout@v3
        with:
          # Pull request event data is in github.event.pull_request
          # For 'pull_request_target', we specify the fork branch:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      # ----------------------------------
      # 2) Secrets Scanning with Gitleaks
      # ----------------------------------
      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_linux_x64.tar.gz \
          | tar xz -C /usr/local/bin
        # Alternatively, you could use the 'gitleaks/gitleaks-action' from the marketplace.

      - name: Run Gitleaks
        run: |
          gitleaks detect --source . --no-git \
            --report-format json --report-path gitleaks-report.json \
            || true
          # '|| true' allows the job to continue even if Gitleaks finds leaks

      - name: Upload Gitleaks Report (Optional)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-report
          path: gitleaks-report.json

      # -----------------------------
      # 3) Dependency Scanning (Node)
      # -----------------------------
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Dependencies
        run: npm ci  # or 'npm install' if no package-lock.json

      - name: Run NPM Audit
        run: npm audit --json > npm-audit.json || true
        # '|| true' ensures we capture the report even if vulnerabilities are found.

      - name: Upload NPM Audit Results (Optional)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: npm-audit.json

      # ------------------------------------------------
      # 4) Docker Build & Vulnerability Scan with Trivy
      # ------------------------------------------------
      - name: Build Docker Image
        run: |
          # We'll build a local image tagged with the PR SHA (or short SHA).
          IMAGE_NAME=myapp:${{ github.event.pull_request.head.sha }}
          docker build -t $IMAGE_NAME .

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp:${{ github.event.pull_request.head.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
        # The 'exit-code: 0' ensures the workflow doesn't fail if vulns are found.
        # In a real scenario, you might want to fail or at least warn the PR author.

      # Optionally, you could upload Trivy scan results if you set 'format: sarif'
      # and then attach it to GitHub's code scanning interface, or simply store it.

      - name: Cleanup Docker
        if: always()
        run: |
          docker rmi myapp:${{ github.event.pull_request.head.sha }} || true
          docker system prune -f || true
          echo "Cleaned up local Docker images."
